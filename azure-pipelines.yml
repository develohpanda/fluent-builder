trigger:
  batch: true
  branches:
    include:
    - '*'
pr:
  autoCancel: true
  branches:
    include:
      - '*'

variables: 
  packageName: '@develohpanda/fluent-builder'

jobs:
  - job: Compile
    steps:
      - checkout: self
        clean: true

      - task: NodeTool@0
        inputs:
          versionSpec: '8.11.1'

      - script: yarn install
        displayName: 'Install packages'

      - script: yarn lint
        displayName: 'Lint'
  
      - script: yarn test:ci
        displayName: 'Run unit tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          failTaskOnFailedTests: true

      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
          failIfCoverageEmpty: true

      - script: yarn compile
        displayName: 'Compile'

      - task: CopyFiles@2
        inputs:
          Contents: 'package.json'
          TargetFolder: 'npm'

      - task: CopyFiles@2
        inputs:
          Contents: 'README.md'
          TargetFolder: 'npm'

      - task: CopyFiles@2
        inputs:
          SourceFolder: 'dist/src'
          Contents: '**'
          TargetFolder: 'npm/src'

      - publish: '$(System.DefaultWorkingDirectory)/npm'
        artifact: 'npm'

  - job: CheckVersion
    condition: "eq(variables['Build.SourceBranch'], 'refs/heads/master')"
    steps:
      - bash: |
          newVersion=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }'  | sed 's/[",]//g' | tr -d '[[:space:]]')
          currentVersion=$(npm show $(packageName) version)
          echo "##vso[task.setvariable variable=targetVersion;isOutput=true]$newVersion"
          echo "##vso[task.setvariable variable=currentVersion;isOutput=true]$currentVersion"
          echo "Package name: $(packageName)"
          echo "Current: $currentVersion"
          echo "New: $newVersion"
        failOnStderr: true
        name: setVersionStep
        displayName: 'Pull package version'

  - deployment: Publish
    displayName: 'Publish'
    environment: 'npm'
    dependsOn: ['Compile', 'CheckVersion']
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(dependencies.CheckVersion.outputs['setVersionStep.targetVersion'], dependencies.CheckVersion.outputs['setVersionStep.currentVersion']))"
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Npm@1
            displayName: 'npm publish'
            inputs:
              command: publish
              workingDir: '$(Pipeline.Workspace)/npm'
              verbose: false
              publishEndpoint: 'npm@develohpanda'

          - task: GitHubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'github@develohpanda'
              tagSource: manual
              tag: 'v$(targetVersion)'
              title: 'v$(targetVersion)'
              releaseNotesSource: input